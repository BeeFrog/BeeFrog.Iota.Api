using Borlay.Iota.Library.Utils;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Text;

namespace Borlay.Iota.Library.Tests
{
    [TestClass]
    public class UtilityTests
    {
        private readonly string intx
        private readonly string outtx
        private readonly string trunk = "1".PadLast(81);
        private readonly string branch = "2".PadLast(81);

        [TestMethod]
        public void GeneratedTryteTest()
        {
            var trytes = IotaApiUtils.GenerateRandomTrytes();
            Assert.AreEqual(81, trytes.Length);
            Assert.IsTrue(ContainsChars(trytes, Constants.TryteAlphabet));
            //Assert.IsTrue(ContainsChars(Constants.TryteAlphabet, trytes)); // sometimes can throw 
        }

        [TestMethod]
        public void SetApproveTrunkTransactionTest()
        {
            var result = intx.SetApproveTrunk(trunk);
            Assert.AreNotEqual(intx, result);
        }

        [TestMethod]
        public void SetApproveBranchTransactionTest()
        {
            var result = intx.SetApproveBranch(branch);
            Assert.AreNotEqual(intx, result);
        }

        [TestMethod]
        public void SetApproveBothTransactionTest()
        {
            var result = intx.SetApproveTransactions(trunk, branch);
            Assert.AreEqual(outtx, result);
        }

        [TestMethod]
        public void SetApproveBothSepTransactionTest()
        {
            var result = intx.SetApproveBranch(branch);
            result = result.SetApproveTrunk(trunk);
            result = result.SetApproveBranch(branch); // ensure that it didn't lost trunk

            Assert.AreEqual(outtx, result);
        }

        [TestMethod]
        public void GetBothTransactionTest()
        {
            var getTrunk = outtx.GetTrunkTransaction();
            var getBranch = outtx.GetBranchTransaction();

            Assert.AreEqual(trunk, getTrunk);
            Assert.AreEqual(branch, getBranch);
        }

        private bool ContainsChars(string value, string chars)
        {
            foreach(var v in value)
            {
                if (!chars.Contains(v.ToString()))
                    return false;
            }
            return true;
        }
    }
}
