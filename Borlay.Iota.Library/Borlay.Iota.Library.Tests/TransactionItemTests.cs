using Borlay.Iota.Library.Models;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Borlay.Iota.Library;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Borlay.Iota.Library.Crypto;

namespace Borlay.Iota.Library.Tests
{
    [TestClass]
    public class TransactionItemTests
    {
        [TestMethod]
        public void Transaction_FromTrytes_DeserialisesCorrectly()
        {
            // Arrange
            var trytes

            // Act
            var tran = new TransactionItem(trytes);

            // Assert
            Assert.AreEqual("ASLIEIUJQHMVNHFQEXIDGGRRINZRHXZT9IWMZLRHWDYL9C9A9JSPBZUXJID9YERUQYRVALRVRLQZYSRXW", tran.Address);
            Assert.AreEqual(-1309730, tran.Value);
            Assert.AreEqual("MINEIOTADOTCOM9999999999999", tran.Tag);
            Assert.AreEqual(1515574230, tran.Timestamp);

            Assert.AreEqual("9BHGQLNJGFONXXJLSNEZXACIP9UQGV9HIWKP9X9COQLHBRSWEBSBJECCLLADKBUW9HAKSQZBNJZVIQAHZ", tran.Bundle);
            Assert.AreEqual("GFZIP9ZXJIJLUBYGTY9LGEDXVBLRCBEOEWYGZKHDLCCGXOVFPZM9MLQRMATDIICUFZRNXDNOBQIBA9999", tran.TrunkTransaction);
            Assert.AreEqual("NYXCW9DAGWKXQXUL9OUIIJYJFDOBLEB9LGTNWMCNADXPJVGECZ9SKVRTOXSNNXRHPP9QMCXSWRLU99999", tran.BranchTransaction);
            Assert.AreEqual("XPBFUCTLEMOYKHMTZOKTNLTTHJY", tran.Nonce);
            Assert.AreEqualtran.SignatureFragment);

            Assert.AreEqual(5, tran.LastIndex);
            Assert.AreEqual(3, tran.CurrentIndex);
            Assert.AreEqual("EQK9ZETZMFMB9VMIEYEXKTAEMZBGQSDSAMCWXKZVVQXKZBUPGCJ9RRQLMWTEKLBWKNERC9ZMIROXZ9999", tran.Hash);
        }

        [TestMethod]
        public void Transaction_ToTrytes_SerialisesCorrectly()
        {
            // Arrange
            var expectedtrytes

            // Act
            var transfer = new TransferItem() { Address = "ASLIEIUJQHMVNHFQEXIDGGRRINZRHXZT9IWMZLRHWDYL9C9A9JSPBZUXJID9YERUQYRVALRVRLQZYSRXW", Message = "TESTMESSAGE", Tag = "MINEIOTADOTCOM", Value = 0 };
            var tran = transfer.CreateTransactions()[0];
            tran.TrunkTransaction = "GFZIP9ZXJIJLUBYGTY9LGEDXVBLRCBEOEWYGZKHDLCCGXOVFPZM9MLQRMATDIICUFZRNXDNOBQIBA9999";
            tran.BranchTransaction = "NYXCW9DAGWKXQXUL9OUIIJYJFDOBLEB9LGTNWMCNADXPJVGECZ9SKVRTOXSNNXRHPP9QMCXSWRLU99999";
            tran.Bundle = "9BHGQLNJGFONXXJLSNEZXACIP9UQGV9HIWKP9X9COQLHBRSWEBSBJECCLLADKBUW9HAKSQZBNJZVIQAHZ";
            tran.SetTimeStamp(new DateTime(2018, 01, 12, 0, 0, 0, DateTimeKind.Utc));

            var trytesOutput = tran.ToTransactionTrytes();

            // Assert
            Assert.AreEqual("ASLIEIUJQHMVNHFQEXIDGGRRINZRHXZT9IWMZLRHWDYL9C9A9JSPBZUXJID9YERUQYRVALRVRLQZYSRXW", tran.Address);
            Assert.AreEqual(0, tran.Value);
            Assert.AreEqual("MINEIOTADOTCOM9999999999999", tran.Tag);


            Assert.AreEqual("9BHGQLNJGFONXXJLSNEZXACIP9UQGV9HIWKP9X9COQLHBRSWEBSBJECCLLADKBUW9HAKSQZBNJZVIQAHZ", tran.Bundle);
            Assert.AreEqual("GFZIP9ZXJIJLUBYGTY9LGEDXVBLRCBEOEWYGZKHDLCCGXOVFPZM9MLQRMATDIICUFZRNXDNOBQIBA9999", tran.TrunkTransaction);
            Assert.AreEqual("NYXCW9DAGWKXQXUL9OUIIJYJFDOBLEB9LGTNWMCNADXPJVGECZ9SKVRTOXSNNXRHPP9QMCXSWRLU99999", tran.BranchTransaction);

            // Assert.AreEqualtran.SignatureFragment);

            Assert.AreEqual(0, tran.LastIndex);
            Assert.AreEqual(0, tran.CurrentIndex);
            Assert.AreEqual(151575840, tran.Timestamp, tran.Timestamp);
            Assert.AreEqual("999999999999999999999999999", tran.Nonce); // Why is this 81 not 27?
            // Assert.AreEqual("EQK9ZETZMFMB9VMIEYEXKTAEMZBGQSDSAMCWXKZVVQXKZBUPGCJ9RRQLMWTEKLBWKNERC9ZMIROXZ9999", tran.Hash);
        }

        [TestMethod]
        public void Transaction_WithPOW_ToTrytes_SerialisesCorrectly()
        {
            // Arrange
            var trunk = "GFZIP9ZXJIJLUBYGTY9LGEDXVBLRCBEOEWYGZKHDLCCGXOVFPZM9MLQRMATDIICUFZRNXDNOBQIBA9999";
            var branch = "NYXCW9DAGWKXQXUL9OUIIJYJFDOBLEB9LGTNWMCNADXPJVGECZ9SKVRTOXSNNXRHPP9QMCXSWRLU99999";            
            var transfer = new TransferItem() { Address = "ASLIEIUJQHMVNHFQEXIDGGRRINZRHXZT9IWMZLRHWDYL9C9A9JSPBZUXJID9YERUQYRVALRVRLQZYSRXW", Message = "TESTMESSAGE", Tag = "MINEIOTADOTCOM", Value = 0 };

            var trans = transfer.CreateTransactions();
            trans[0].SetAttachmentTime(new DateTime(2018, 01, 12, 0, 0, 0, DateTimeKind.Utc));
            trans[0].SetTimeStamp(new DateTime(2018, 01, 12, 0, 0, 0, DateTimeKind.Utc));
            var tranTrytes = trans.GetTrytes();

            // Act
            var trytesToSend = tranTrytes.DoPow(trunk, branch, 4, 1, CancellationToken.None).Result; // do the pow
            var tran = new TransactionItem(trytesToSend[0]);

            // Assert
            Assert.AreEqual("ASLIEIUJQHMVNHFQEXIDGGRRINZRHXZT9IWMZLRHWDYL9C9A9JSPBZUXJID9YERUQYRVALRVRLQZYSRXW", tran.Address);
            Assert.AreEqual(0, tran.Value);
            
            Assert.AreEqual(151575840, tran.Timestamp, tran.Timestamp);
            Assert.AreEqual(1515758400000, tran.AttachmentTimestamp, tran.AttachmentTimestamp);            
            Assert.AreEqual(0, tran.CurrentIndex);
            Assert.AreEqual(0, tran.LastIndex);
            Assert.AreEqual("GFZIP9ZXJIJLUBYGTY9LGEDXVBLRCBEOEWYGZKHDLCCGXOVFPZM9MLQRMATDIICUFZRNXDNOBQIBA9999", tran.TrunkTransaction);
            Assert.AreEqual("NYXCW9DAGWKXQXUL9OUIIJYJFDOBLEB9LGTNWMCNADXPJVGECZ9SKVRTOXSNNXRHPP9QMCXSWRLU99999", tran.BranchTransaction);
            Assert.AreEqual("MINEIOTADOTCOM9999999999999", tran.Tag);
            // Assert.AreEqual("9BHGQLNJGFONXXJLSNEZXACIP9UQGV9HIWKP9X9COQLHBRSWEBSBJECCLLADKBUW9HAKSQZBNJZVIQAHZ", tran.Bundle);            
            // Assert.AreEqual("UIZGIWQZHBKTDRERGFGMSXC9XMU", tran.Nonce);
            // Assert.AreEqual("EQK9ZETZMFMB9VMIEYEXKTAEMZBGQSDSAMCWXKZVVQXKZBUPGCJ9RRQLMWTEKLBWKNERC9ZMIROXZ9999", tran.Hash);
        }

        [TestMethod]
        public void Transaction_CanSign_WithoutError()
        {
            var seed = "GFZIP9ZXJIJLUBYGTY9LGEDXVBLRCBEOEWYGZKHDLCCGXOVFPZM9MLQRMATDIICUFZRNXDNOBQIBA9999";
            var address1 = Utils.IotaUtils.GenerateAddress(seed, 0);
            var address2 = Utils.IotaUtils.GenerateAddress(seed, 1);
            var pKey = Utils.Converter.ToTrytes(address1.PrivateKeyTrints);

            var signing = new Utils.Signing(new Kerl());            
            var key1 = signing.Key(Utils.Converter.ToTrits(seed), 0, 2);

            var address1again = Utils.IotaUtils.GenerateAddress(key1, false, CancellationToken.None);
            Assert.AreEqual(address1.Address, address1again);

            address1.Balance = 1;

            var trunk = "GFZIP9ZXJIJLUBYGTY9LGEDXVBLRCBEOEWYGZKHDLCCGXOVFPZM9MLQRMATDIICUFZRNXDNOBQIBA9999";
            var branch = "NYXCW9DAGWKXQXUL9OUIIJYJFDOBLEB9LGTNWMCNADXPJVGECZ9SKVRTOXSNNXRHPP9QMCXSWRLU99999";

            var transfer = new TransferItem() { Address = address2.Address, Message = "TESTMESSAGE", Tag = "MINEIOTADOTCOM", Value = 1 };

            // Act
            var trans = transfer.CreateTransactions(address1.Address, address1);

            // Assert

        }

        [TestMethod]
        public void TransactionTest_BundleHash()
        {
            var trytes
            // Act
            var tran = new TransactionItem(trytes);

            // Assert
            Assert.AreEqual("S9XDEUXLTPUKULJXMV9IUKBMLGRHLXPCIMWFE9UHIGQGJEZSJRPYFBDSNNSMDEHBSTUEGAGBX9QZNKDNY", tran.Address);
            Assert.AreEqual(0, tran.Value);
            Assert.AreEqual("PAYONE999999999999999999999", tran.Tag);
            // Assert.AreEqual(1515574230, tran.Timestamp);

            Assert.AreEqual("GYYUGCFJRROQRCMHPJDYFKGRBPCWUTLVEWQROAFGBSGENB9FOCSWVQRRVGDXLJLWZZHEQ9ESLRCUJGSM9", tran.Bundle);
            Assert.AreEqual("MEFHCNF9JEMCAHURCCO9BCGLNKVWJZIHQN9AZJPBHBEVVOZTWEPRLLUDVNWHHUGSHRPXZXUUVSHVA9999", tran.TrunkTransaction);
            Assert.AreEqual("IIFFTWVWPBOVFXBIYRVNKHFJIZTOFJALWXWPFOQQSLXPKMWBRGOIRTEXQDUNWLOBZSUYZHYLRUYOA9999", tran.BranchTransaction);
            Assert.AreEqual("ML9FMARSMATDXZFMLXDGGGDEMFP", tran.Nonce);
            // Assert.AreEqualtran.SignatureFragment);

            Assert.AreEqual(1, tran.LastIndex);
            Assert.AreEqual(1, tran.CurrentIndex);
            Assert.AreEqual("HBBNJTTTBKHUFUNVXGZSEDFWXGJRVPEBRLLBX9BRTDHOFPZSEGMACYDAQNJBKZLMQPVMRCKFUAOY99999", tran.Hash);
        }

        [TestMethod]
        public void From_Trytes_CorrectBundleHasCalculated()
        {
            var trytes
            var tran = new TransactionItem(trytes);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", tran.Bundle);

            var bundle = new TransactionItem[] { tran };
            var response = bundle.FinalizeBundleHash(new Kerl());
            var response2 = bundle.FinalizeBundleHash(new Kerl());
            Assert.AreEqual(response, response2);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", response);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", tran.Bundle);
        }

        [TestMethod]
        public void FromTrytes_Bundle_ValidateCorrectly()
        {
            var trytes
            var tran = new TransactionItem(trytes);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", tran.Bundle);


            var success = ValidBundle_SingleItem(trytes);

            var bundle = new TransactionItem[] { tran };
            var response = bundle.FinalizeBundleHash(new Kerl());
            var response2 = bundle.FinalizeBundleHash(new Kerl());
            Assert.AreEqual(response, response2);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", response);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", tran.Bundle);
        }

        [TestMethod]
        public void FromTrytes2_Bundle_ValidateCorrectly()
        {
            var trytes = "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999S9XDEUXLTPUKULJXMV9IUKBMLGRHLXPCIMWFE9UHIGQGJEZSJRPYFBDSNNSMDEHBSTUEGAGBX9QZNKDNY999999999999999999999999999IGYNONE99999999999999999999IEJLTYD99999999999999999999XX9TDOEWQGKQNJTZPFAJJLOREYICWGHIIZEQFFFBACSYTKQJBPJVNJTHRAUKQT9AEWVGXACCVZFJICPJWT9LVYFQGF9WQHDQNLHPAKNFAC9VXPHNJPDFIQIELAYMBHCPDQBQSSXPLZRVSVSQHGPXKMVNGKRWN99999A9VWVUZWGPPYCBOTNJZAQMUDWZVXFLTCQZZJHWGSOAUTXPSMEFJQZKOKAIIJYMPYLUSPODTIL9WS99999PAYNONE99999999999999999999LASLSZBJE999999999MMMMMMMMMCAMDTIYKYAYPIZOMMTZAFODTEIS";
            var tran = new TransactionItem(trytes);
            Assert.AreEqual("XX9TDOEWQGKQNJTZPFAJJLOREYICWGHIIZEQFFFBACSYTKQJBPJVNJTHRAUKQT9AEWVGXACCVZFJICPJW", tran.Bundle);


            var success = ValidBundle_SingleItem(trytes);

            var bundle = new TransactionItem[] { tran };
            var response = bundle.FinalizeBundleHash(new Kerl());
            var response2 = bundle.FinalizeBundleHash(new Kerl());
            Assert.AreEqual(response, response2);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", response);
            Assert.AreEqual("RFIKCEZSNAPU9YE9AGSEJGDDDHLYBQYCYABLQBYIRYCYBLJOOBKDLKYRJXYEWHCXVNCVYCGVCHZKNHXDA", tran.Bundle);
        }        

    [TestMethod]
        public void GetTrytes()
        {
            var api = new IotaApi("https://nodes.thetangle.org:443");
            var bundle = api.GetBundleTransactionItems("NLAVEPNFGLLJXER9VKTTBQSHTXZGBLNH9ILHB9TXH9YEGGETCQAWIYPKKWSAODFORD9TWJHPHLNYHWIQX").Result;
            foreach (var tran in bundle)
            {
                var rTrytes = tran.RawTrytes;
                var x = tran.ToString();
            }
        }

        [TestMethod, Ignore]
        public void GetTrytesMine22()
        {
            var trytes

            var api = new IotaApi("https://nodes.thetangle.org:443");
            var bundle = api.GetBundleTransactionItems("XX9TDOEWQGKQNJTZPFAJJLOREYICWGHIIZEQFFFBACSYTKQJBPJVNJTHRAUKQT9AEWVGXACCVZFJICPJW").Result;
            var tran = bundle[0];
            Assert.AreEqual(trytes, tran.RawTrytes);
        }

        [TestMethod]
        public void TestPOW_doesNotCorruptBundleHash()
        {
            var trytes

            var tran = new TransactionItem(trytes);
            Assert.AreEqual("XX9TDOEWQGKQNJTZPFAJJLOREYICWGHIIZEQFFFBACSYTKQJBPJVNJTHRAUKQT9AEWVGXACCVZFJICPJW", tran.Bundle);
            var output = (new string[] { trytes }.DoPow(tran.TrunkTransaction, tran.BranchTransaction, 5, CancellationToken.None)).Result;

            var tran2 = new TransactionItem(output[0]);
            Assert.AreEqual(tran2.Bundle, tran.Bundle);
            Assert.IsTrue(ValidBundle_SingleItem(output[0]));

            //var bundle = new TransactionItem[] { tran2 };
            //var response = bundle.FinalizeBundleHash(new Kerl());
            //Assert.AreEqual("XX9TDOEWQGKQNJTZPFAJJLOREYICWGHIIZEQFFFBACSYTKQJBPJVNJTHRAUKQT9AEWVGXACCVZFJICPJW", response);
        }

        [TestMethod]
        public void TestPOW_doesNotCorruptBundleHash2()
        {
            var trytes = "SPAMSPAMSPAM999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999TF9MSIX99999999999999999999BVVKTYD99999999999999999999NLAVEPNFGLLJXER9VKTTBQSHTXZGBLNH9ILHB9TXH9YEGGETCQAWIYPKKWSAODFORD9TWJHPHLNYHWIQXMNLKSORAJWXRFTGAEGZVVXHIZBUFHQSFC9TRYMVGMFFSWDMFYLVUHEXYALANIKXOU9PLNGUHMQQDZ9999HDTF9BHXPQKGJNJFZ9WBJQWNBUPZBVCRQFZBMXSHVESWECTEQBUDYMELUMIW9LYHSFTBKBASDNZDA9999999MSIX99999999999999999999COZMOXBJE999999999L99999999EUBOPNIPRRCYKBKBJRXQPCHELMM";

            var tran = new TransactionItem(trytes);
            Assert.AreEqual("NLAVEPNFGLLJXER9VKTTBQSHTXZGBLNH9ILHB9TXH9YEGGETCQAWIYPKKWSAODFORD9TWJHPHLNYHWIQX", tran.Bundle);
            var output = (new string[] { trytes }.DoPow(tran.TrunkTransaction, tran.BranchTransaction, 5, CancellationToken.None)).Result;

            Assert.IsTrue(ValidBundle_SingleItem(output[0]));

            var tran2 = new TransactionItem(output[0]);
            Assert.AreEqual(tran2.Bundle, tran.Bundle);

            var bundle = new TransactionItem[] { tran2 };
            var response = bundle.FinalizeBundleHash(new Kerl());
            Assert.AreEqual(response, "NLAVEPNFGLLJXER9VKTTBQSHTXZGBLNH9ILHB9TXH9YEGGETCQAWIYPKKWSAODFORD9TWJHPHLNYHWIQX");            
        }

        [TestMethod, Ignore]
        public void SendZeroTran()
        {
            var api = new IotaApi("https://nodes.thetangle.org:443");
            var tran = new TransferItem() { Address = "S9XDEUXLTPUKULJXMV9IUKBMLGRHLXPCIMWFE9UHIGQGJEZSJRPYFBDSNNSMDEHBSTUEGAGBX9QZNKDNY", Tag = "UNITTEST" };

            var result = api.AttachTransfer(tran, CancellationToken.None).Result;
            Assert.IsNotNull(result);
        }

        bool ValidBundle_SingleItem(string transactionTrytes)
        {
            var tran = new TransactionItem(transactionTrytes);
            var bundleHash = tran.Bundle;
            var bundleTrytes = tran.GetBundleTrytes();
            var curl = new Kerl();

            String trxTrytes = transactionTrytes.Substring(2187, 162);
            Assert.AreEqual(bundleTrytes, trxTrytes);
            // Absorb bundle hash + value + timestamp + lastIndex + currentIndex trytes.
            curl.Absorb(Utils.Converter.ToTrits(trxTrytes));
            
            int[] bundleFromTrxs = new int[243];
            curl.Squeeze(bundleFromTrxs);
            String bundleFromTxString = Utils.Converter.ToTrytes(bundleFromTrxs);

            // Check if bundle hash is the same as returned by tx object
            if (!bundleFromTxString.Equals(bundleHash))
            {
                throw new ArgumentException($"INVALID_BUNDLE_HASH_ERROR: Expected: {bundleFromTxString} but your bundle is {bundleHash}");
            }

            // Last tx in the bundle should have currentIndex === lastIndex
            //bundle.setLength(bundle.getTransactions().size());
            return tran.CurrentIndex == tran.LastIndex;            
        }
    }
}
